input {
    file {
    path => "*.csv"
    type => "cqlog"
    start_position => "beginning"
#sincedb_path => "/dev/null"
  }
}

filter{
    csv{
       columns => ["id", "record_type", "Headline", "ProductLine", "Product", "Component", "SubComponent", "Release_Number", "Priority", "Severity", "SR_Type", "Submitter_Name", "Owner_Full_Name1", "State", "Submit_Date", "AssignedDate", "ResolvedDate", "ClosedDate", "Resolution", "Root_Cause_Category", "ActualHours", "Init_Assign_Time_in_hrs", "Resolve_Time_in_hrs", "Total_Resolve_time_in_hrs","DueDate"]
       #columns => ["id", "record_type", "Headline", "Product", "Component", "Release_Number", "Priority", "Severity", "SR_Type", "Submitter_Name", "Owner_Full_Name1", "State", "Submit_Date", "AssignedDate", "ResolvedDate", "ClosedDate", "Resolution", "Root_Cause_Category", "ActualHours", "Init_Assign_Time_in_hrs", "Resolve_Time_in_hrs", "Total_Resolve_time_in_hrs"]
       #columns => ["id", "record_type", "Headline", "Product", "Component", "ProjectName", "Priority", "Severity", "CR_Type", "Submitter_Name", "Owner_Full_Name1", "State", "Submit_Date", "AssignedDate", "ResolvedDate", "ClosedDate", "Resolution", "Resolution_Statetype", "Init_Assign_Time_in_hrs", "Resolve_Time_in_hrs", "Total_Resolve_time_in_hrs"]
       #columns => ["id", "Headline", "ProductLine", "Product", "Component", "SubComponent", "Submit_Date", "Init_Assign_Time_in_hrs", "Owner_Full_Name1", "Priority", "Severity", "SR_Type", "Release_Number", "State", "Resolution", "Resolve_Time_in_hrs", "Total_Resolve_time_in_hrs", "ActualHours", "ClosedDate", "Root_Cause_Category", "Submitter_Name", "AssignedDate", "Closed2Date", "Release_Number", "Root_Cause_Category", "SR_Type"]
           separator => "|"
        } #csv 
        #June 14, 2016 4:45:12 PM PDT
    #January 14, 2015 7:35:11 AM EST
        #Mon Jul 18 13:23:20 PDT 2016
    date {
       #match => ["Submit_Date", "MMMM d, YYYY hh:mm:ss a Z"]
       match => ["Submit_Date", "EEE MMM dd HH:mm:ss z YYYY"]
           timezone => "America/Los_Angeles"
       target => "@timestamp"
    }
    date {
       #match => ["AssignedDate", "MMMM d, YYYY hh:mm:ss a z"]
       match => ["AssignedDate", "EEE MMM dd HH:mm:ss z YYYY"]
           timezone => "America/Los_Angeles"
       target => "AssignedDate"
    }
    date {
       #match => ["ResolvedDate", "MMMM d, YYYY hh:mm:ss a z"]
       match => ["ResolvedDate", "EEE MMM dd HH:mm:ss z YYYY"]
           timezone => "America/Los_Angeles"
       target => "ResolvedDate"
    }
    date {
       #match => ["ClosedDate", "MMMM d, YYYY hh:mm:ss a z"]
       match => ["ClosedDate", "EEE MMM dd HH:mm:ss z YYYY"]
           timezone => "America/Los_Angeles"
       target => "ClosedDate"
    }
    date {
       #match => ["DueDate", "MMMM d, YYYY hh:mm:ss a z"]
       match => ["DueDate", "EEE MMM dd HH:mm:ss z YYYY"]
           timezone => "America/Los_Angeles"
       target => "DueDate"
    }

if [AssignedDate] {
        ruby {
        init => "require 'time'"
        code => "
                event.set('Init_Assign_Time_in_hrs', ((event.get('AssignedDate') - event.get('@timestamp'))/3600).round(2));
                "
        }
}
if [ResolvedDate] and [AssignedDate] and [ClosedDate] {
ruby {
    init => "require 'time'"
    code => "
                         if (event.get('ResolvedDate') > event.get('AssignedDate')) 
             event.set('Resolve_Time_in_hrs', ((event.get('ResolvedDate') - event.get('AssignedDate'))/3600).round(2));
             else 
             event.set('Resolve_Time_in_hrs', ((event.get('ResolvedDate') - event.get('@timestamp'))/3600).round(2));
                         end
             event.set('Resolve_Time_From_SubmitDate_in_hrs', ((event.get('ResolvedDate') - event.get('@timestamp'))/3600).round(2));
             event.set('Total_Resolve_time_in_hrs', ((event.get('ClosedDate') - event.get('@timestamp'))/3600).round(2));
                        "
        add_tag => [ "Resolve_time_calculated" ]
}
} else if [ResolvedDate] and [AssignedDate] and ![ClosedDate] {
ruby {
    init => "require 'time'"
    code => "
             event.set('Resolve_Time_in_hrs', ((event.get('ResolvedDate') - event.get('AssignedDate'))/3600).round(2));
             event.set('Resolve_Time_From_SubmitDate_in_hrs', ((event.get('ResolvedDate') - event.get('@timestamp'))/3600).round(2));
             event.set('Total_Resolve_time_in_hrs', ((event.get('ResolvedDate') - event.get('@timestamp'))/3600).round(2));
            "
    add_tag => [ "Resolve_time_calculated", "Pleaseclose" ]
}
} else if [ClosedDate] and [AssignedDate] and ![ResolvedDate] {
ruby {
    init => "require 'time'"
    code => "
             event.set('Resolve_Time_in_hrs', ((event.get('ClosedDate') - event.get('AssignedDate'))/3600).round(2));
             event.set('Resolve_Time_From_SubmitDate_in_hrs', ((event.get('ClosedDate') - event.get('@timestamp'))/3600).round(2));
             event.set('Total_Resolve_time_in_hrs', ((event.get('ClosedDate') - event.get('@timestamp'))/3600).round(2));
            "
        add_tag => [ "Resolve_time_calculated" ]
}
} else if [ClosedDate] and ![ResolvedDate] and ![AssignedDate] {
ruby {
    init => "require 'time'"
    code => "
             event.set('Resolve_Time_in_hrs', ((event.get('ClosedDate') - event.get('@timestamp'))/3600).round(2));
             event.set('Resolve_Time_From_SubmitDate_in_hrs', ((event.get('ClosedDate') - event.get('@timestamp'))/3600).round(2));
             event.set('Total_Resolve_time_in_hrs', ((event.get('ClosedDate') - event.get('@timestamp'))/3600).round(2));
            "
        add_tag => [ "Resolve_time_calculated" ]
}
}else {
        mutate {
                add_tag => [ "Resolve_time_not_calculated" ]
        }
}
mutate{
convert => { 
                        "Init_Assign_Time_in_hrs" => "float" 
                        "Resolve_Time_in_hrs" => "float" 
                        "Resolve_Time_From_SubmitDate_in_hrs" => "float" 
                        "Total_Resolve_time_in_hrs" => "float" 
           }
}
if [Resolve_Time_From_SubmitDate_in_hrs] {
        if ([Resolve_Time_From_SubmitDate_in_hrs] < 2.0) and ([SR_Type] == 'Task' or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '1 - Urgent') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if  ([Resolve_Time_From_SubmitDate_in_hrs] < 6.0) and ([SR_Type] == 'Task'  or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '2 - Major') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if  ([Resolve_Time_From_SubmitDate_in_hrs] < 24.0) and ([SR_Type] == 'Task'  or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '3 - Normal') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if  ([Resolve_Time_From_SubmitDate_in_hrs] < 48.0) and ([SR_Type] == 'Task'  or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '4 - Low') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if ([Resolve_Time_From_SubmitDate_in_hrs] < 6.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '1 - Urgent') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if  ([Resolve_Time_From_SubmitDate_in_hrs] < 24.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '2 - Major') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if  ([Resolve_Time_From_SubmitDate_in_hrs] < 72.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '3 - Normal') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if  ([Resolve_Time_From_SubmitDate_in_hrs] < 168.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '4 - Low') {
                mutate {
                        add_field => { "SLA_after_submit" => "met" }
                }
        }else if [DueDate] and [ResolvedDate] {
                if ([ResolvedDate] < [DueDate]) {
                        mutate {
                                add_field => { "SLA_after_submit" => "met" }
                        }
                }
        }else if [DueDate] and [ClosedDate] {
                if ([ClosedDate] < [DueDate]) {
                        mutate {
                                add_field => { "SLA_after_submit" => "met" }
                        }
                }
        }else {
                mutate {
                        add_field => { "SLA_after_submit" => "missed" }
                }
        }
}else {
        mutate {
                add_field => { "SLA_after_submit" => "unknown" }
        }
}
if [Resolve_Time_in_hrs] {
        if ([Resolve_Time_in_hrs] < 2.0) and ([SR_Type] == 'Task') or ([SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '1 - Urgent') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if  ([Resolve_Time_in_hrs] < 6.0) and ([SR_Type] == 'Task'  or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '2 - Major') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if  ([Resolve_Time_in_hrs] < 24.0) and ([SR_Type] == 'Task'  or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '3 - Normal') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if  ([Resolve_Time_in_hrs] < 48.0) and ([SR_Type] == 'Task'  or [SR_Type] == 'Incident') and ([SubComponent] !~ /Build/) and ([Severity] == '4 - Low') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if ([Resolve_Time_in_hrs] < 6.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '1 - Urgent') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if  ([Resolve_Time_in_hrs] < 24.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '2 - Major') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if  ([Resolve_Time_in_hrs] < 72.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '3 - Normal') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if  ([Resolve_Time_in_hrs] < 168.0) and (([SR_Type] == 'Task' and [SubComponent] =~ /Build/) or [SR_Type] == 'Research' or [SR_Type] == 'Reporting') and ([Severity] == '4 - Low') {
                mutate {
                        add_field => { "SLA_after_assignment" => "met" }
                }
        }else if [DueDate] and [ResolvedDate] {
                if ([ResolvedDate] < [DueDate]) {
                        mutate {
                                add_field => { "SLA_after_assignment" => "met" }
                                add_tag => [ "DueDatemet" ]
                        }
                }
        }else {
                mutate {
                        add_field => { "SLA_after_assignment" => "missed" }
                }
        }
}else {
        mutate {
                add_field => { "SLA_after_assignment" => "unknown" }
        }
}
#if ([SR_Type] != "Task" and [SR_Type] != "Incident") {
#       mutate{
#               add_tag => [ "ChangedFrom%{SR_Type}" ]
#               replace => { "SR_Type" => "Task" }
#       }
#} 
#if ([Severity] == "4 - Low") {
#       mutate{
#               add_tag => [ "ChangedFrom-4 - Low" ]
#               replace => { "Severity" => "3 - Normal" }
#       }
#} 

}

output {
  elasticsearch { 
   hosts => ["localhost:9400"] 
   action => "index"
   index => "logstash-%{+YYYY.MM}"
  }
  stdout { 
        codec => rubydebug 
        }
}
